---

- name: Get next available User ID
  shell: "echo $(dscl . -list /Users uid | awk '{print $2}' | sort -ug  | tail -1) + 1 | bc"
  register: uid

- command: mktemp -t create_{{ username }}-XXXXX
  register: newuser_script

- name: Create user script
  template: src=newuser.j2 dest={{ newuser_script.stdout }} mode=0755

- name: Make a user!
  shell: "{{ newuser_script.stdout }} creates=/Users/{{ username }}"

- name: Remove the newuser script
  file: path={{ newuser_script.stdout }} state=absent

# - name: Prepend /usr/local/bin to $PATH in .bashrc
#   lineinfile:
#     dest: /Users/{{ username }}/.bashrc
#     state: present
#     regexp: '^export\s+PATH=/usr/local/bin:\\$PATH'
#     insertafter: EOF
#     line: 'export PATH=/usr/local/bin:$PATH\n'
#     create: yes

# - set_fact:
#     terminal_emoji: "{{ lookup('template', 'roles/new-user/files/terminal_emojis.txt').split() | random }}"

# - set_fact: 
#     bashrc_prompt: "{{ lookup('template', 'templates/bashrc.j2') }}"

# - name: Prepend /usr/local/bin to $PATH in .bashrc
#   lineinfile:
#     dest: /Users/{{ username }}/.bashrc
#     state: present
#     regexp: '^export\s+PATH=/usr/local/bin:\$PATH'
#     insertafter: EOF
#     line: 'export PATH=/usr/local/bin:$PATH'
#     create: yes

# - name: Append custom prompt to .bashrc
#   blockinfile:
#     dest: /Users/{{ username }}/.bashrc
#     block: '{{ lookup("template", "roles/new-user/templates/bashrc.j2") }}'
#     create: yes
#     insertafter: EOF
#     state: present

# - name: Normalize spacing around ANSIBLE MANAGED BLOCK blocks
#   replace:
#     path: /Users/{{ username }}/.bashrc
#     regexp: '\s*(# (?:BEGIN|END) ANSIBLE MANAGED BLOCK)\s*'
#     replace: '\n\n\1\n'


